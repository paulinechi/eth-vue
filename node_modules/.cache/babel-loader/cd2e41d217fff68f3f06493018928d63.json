{"remainingRequest":"/home/ubuntu/eth-vue/node_modules/thread-loader/dist/cjs.js!/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/eth-vue/src/util/web3/getWeb3.js","dependencies":[{"path":"/home/ubuntu/eth-vue/src/util/web3/getWeb3.js","mtime":1640695749883},{"path":"/home/ubuntu/eth-vue/babel.config.js","mtime":1640695749839},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/thread-loader/dist/cjs.js","mtime":1640501305479},{"path":"/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js","mtime":1640788501629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgV2ViMyBmcm9tICJ3ZWIzIjsKdmFyIGdldFdlYjMgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgLy8gV2FpdCBmb3IgbG9hZGluZyBjb21wbGV0aW9uIHRvIGF2b2lkIHJhY2UgY29uZGl0aW9ucyB3aXRoIHdlYjMgaW5qZWN0aW9uIHRpbWluZy4KICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIGZ1bmN0aW9uICgpIHsKICAgIGlmICh3aW5kb3cuZXRoZXJldW0pIHsKICAgICAgd2luZG93LmV0aGVyZXVtLmVuYWJsZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJTdWNjZXNzZnVsbHkgZW5hYmxlZCBXaW5kb3cgRXRoZXJldW0uIik7CiAgICAgICAgd2luZG93LndlYjMgPSBuZXcgV2ViMyh3aW5kb3cuZXRoZXJldW0pOwogICAgICAgIHdpbmRvdy53ZWIzLmV0aC5uZXQuaXNMaXN0ZW5pbmcoKS50aGVuKGZ1bmN0aW9uIChpc0xpc3RlbmluZykgewogICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgIGhhc0luamVjdGVkV2ViMzogaXNMaXN0ZW5pbmcsCiAgICAgICAgICAgIHdlYjM6IHdpbmRvdy53ZWIzCiAgICAgICAgICB9KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIlVuYWJsZSB0byBjaGVjayBpZiBjb25uZWN0ZWQ6ICIgKyBlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIlVuYWJsZSB0byBlbmFibGUgV2luZG93IEV0aGVyZXVtOiAiICsgZXJyb3IpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqLwogICAgICByZWplY3QoewogICAgICAgIHJlc3VsdDogbnVsbCwKICAgICAgICBlcnI6ICJVbmFibGUgdG8gY29ubmVjdCB0byBXZWIzIgogICAgICB9KTsKICAgIH0KICB9KTsKfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgLy8gZ2V0IGJsb2NrY2hhaW4gbmV0d29yayBJZAogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICByZXN1bHQud2ViMy5ldGgubmV0LmdldElkKGZ1bmN0aW9uIChlcnIsIG5ldHdvcmtJZCkgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgcmVzdWx0KTsKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi8KCiAgICAgICAgcmVqZWN0KHsKICAgICAgICAgIHJlc3VsdDogcmVzdWx0LAogICAgICAgICAgZXJyOiBlcnIKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBuZXR3b3JrSWQgPSBuZXR3b3JrSWQudG9TdHJpbmcoKTsKICAgICAgICByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCByZXN1bHQsIHsKICAgICAgICAgIG5ldHdvcmtJZDogbmV0d29ya0lkCiAgICAgICAgfSk7CiAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICB9CiAgICB9KTsKICB9KTsKfSkudGhlbihmdW5jdGlvbiAobmV0d29ya0lkUmVzdWx0KSB7CiAgLy8gZ2V0IGNvaW5iYXNlCiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIG5ldHdvcmtJZFJlc3VsdC53ZWIzLmV0aC5nZXRDb2luYmFzZShmdW5jdGlvbiAoZXJyLCBjb2luYmFzZSkgewogICAgICB2YXIgcmVzdWx0OwoKICAgICAgaWYgKGVycikgewogICAgICAgIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIG5ldHdvcmtJZFJlc3VsdCk7CiAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovCgogICAgICAgIHJlamVjdCh7CiAgICAgICAgICByZXN1bHQ6IHJlc3VsdCwKICAgICAgICAgIGVycjogZXJyCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgbmV0d29ya0lkUmVzdWx0LCB7CiAgICAgICAgICBjb2luYmFzZTogY29pbmJhc2UKICAgICAgICB9KTsKICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgIH0KICAgIH0pOwogIH0pOwp9KS50aGVuKGZ1bmN0aW9uIChjb2luYmFzZVJlc3VsdCkgewogIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovCiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHZhciBhZGRyZXNzID0gY29pbmJhc2VSZXN1bHQud2ViMy5ldGguZGVmYXVsdEFjY291bnQ7CiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgY29pbmJhc2VSZXN1bHQsIHsKICAgICAgYWRkcmVzczogYWRkcmVzcwogICAgfSk7CiAgICByZXNvbHZlKHJlc3VsdCk7CiAgfSk7Cn0pOwpleHBvcnQgZGVmYXVsdCBnZXRXZWIzOw=="},{"version":3,"sources":["/home/ubuntu/eth-vue/src/util/web3/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","enable","then","console","log","web3","eth","net","isListening","hasInjectedWeb3","catch","error","result","err","getId","networkId","Object","assign","toString","networkIdResult","getCoinbase","coinbase","coinbaseResult","address","defaultAccount"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport Web3 from \"web3\";\n\nlet getWeb3 = new Promise(function(resolve, reject) {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", function() {\n    if (window.ethereum) {\n      window.ethereum\n        .enable()\n        .then(() => {\n          console.log(\"Successfully enabled Window Ethereum.\");\n          window.web3 = new Web3(window.ethereum);\n          window.web3.eth.net\n            .isListening()\n            .then(isListening => {\n              resolve({\n                hasInjectedWeb3: isListening,\n                web3: window.web3\n              });\n            })\n            .catch(error => {\n              console.error(\"Unable to check if connected: \" + error);\n            });\n        })\n        .catch(error => {\n          console.error(\"Unable to enable Window Ethereum: \" + error);\n        });\n    } else {\n      /* eslint-disable-next-line */\n      reject({\n        result: null,\n        err: \"Unable to connect to Web3\"\n      });\n    }\n  });\n})\n  .then(result => {\n    // get blockchain network Id\n    return new Promise(function(resolve, reject) {\n      result.web3.eth.net.getId((err, networkId) => {\n        if (err) {\n          result = Object.assign({}, result);\n\n          /* eslint-disable-next-line */\n          reject({\n            result,\n            err\n          });\n        } else {\n          networkId = networkId.toString();\n          result = Object.assign({}, result, { networkId });\n          resolve(result);\n        }\n      });\n    });\n  })\n  .then(networkIdResult => {\n    // get coinbase\n    return new Promise(function(resolve, reject) {\n      networkIdResult.web3.eth.getCoinbase((err, coinbase) => {\n        let result;\n        if (err) {\n          result = Object.assign({}, networkIdResult);\n\n          /* eslint-disable-next-line */\n          reject({\n            result,\n            err\n          });\n        } else {\n          result = Object.assign({}, networkIdResult, { coinbase });\n          resolve(result);\n        }\n      });\n    });\n  })\n  .then(coinbaseResult => {\n    /* eslint-disable no-unused-vars */\n    return new Promise(function(resolve, reject) {\n      let address = coinbaseResult.web3.eth.defaultAccount;\n      let result = Object.assign({}, coinbaseResult, { address });\n      resolve(result);\n    });\n  });\n\nexport default getWeb3;\n"]}]}