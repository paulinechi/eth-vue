{"remainingRequest":"/home/ubuntu/eth-vue/node_modules/thread-loader/dist/cjs.js!/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/eth-vue/src/util/ArrayManager.js","dependencies":[{"path":"/home/ubuntu/eth-vue/src/util/ArrayManager.js","mtime":1640695749879},{"path":"/home/ubuntu/eth-vue/babel.config.js","mtime":1640695749839},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/thread-loader/dist/cjs.js","mtime":1640501305479},{"path":"/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js","mtime":1640788501629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmV4cG9ydCBmdW5jdGlvbiBjaHVua0FycmF5KGFycmF5T2JqZWN0LCBudW1iZXJPZkl0ZW1zUGVyQ2h1bmspIHsKICB2YXIgaiA9IC0xOwogIHZhciBjaHVua2VkQXJyYXlPYmplY3QgPSBhcnJheU9iamVjdC5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBhcnJheUl0ZW0sIGluZGV4KSB7CiAgICBpZiAoaW5kZXggJSBudW1iZXJPZkl0ZW1zUGVyQ2h1bmsgPT09IDApIHsKICAgICAgaiArPSAxOwogICAgICBhY2N1bXVsYXRvcltqXSA9IFthcnJheUl0ZW1dOwogICAgfSBlbHNlIHsKICAgICAgYWNjdW11bGF0b3Jbal0ucHVzaChhcnJheUl0ZW0pOwogICAgfQoKICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICB9LCBbXSk7CiAgcmV0dXJuIGNodW5rZWRBcnJheU9iamVjdDsKfQ=="},{"version":3,"sources":["/home/ubuntu/eth-vue/src/util/ArrayManager.js"],"names":["chunkArray","arrayObject","numberOfItemsPerChunk","j","chunkedArrayObject","reduce","accumulator","arrayItem","index","push"],"mappings":";AAAA,OAAO,SAASA,UAAT,CAAoBC,WAApB,EAAiCC,qBAAjC,EAAwD;AAC7D,MAAIC,CAAC,GAAG,CAAC,CAAT;AAEA,MAAMC,kBAAkB,GAAGH,WAAW,CAACI,MAAZ,CACzB,UAACC,WAAD,EAAcC,SAAd,EAAyBC,KAAzB,EAAmC;AACjC,QAAIA,KAAK,GAAGN,qBAAR,KAAkC,CAAtC,EAAyC;AACvCC,MAAAA,CAAC,IAAI,CAAL;AACAG,MAAAA,WAAW,CAACH,CAAD,CAAX,GAAiB,CAACI,SAAD,CAAjB;AACD,KAHD,MAGO;AACLD,MAAAA,WAAW,CAACH,CAAD,CAAX,CAAeM,IAAf,CAAoBF,SAApB;AACD;;AAED,WAAOD,WAAP;AACD,GAVwB,EAWzB,EAXyB,CAA3B;AAcA,SAAOF,kBAAP;AACD","sourcesContent":["export function chunkArray(arrayObject, numberOfItemsPerChunk) {\n  let j = -1;\n\n  const chunkedArrayObject = arrayObject.reduce(\n    (accumulator, arrayItem, index) => {\n      if (index % numberOfItemsPerChunk === 0) {\n        j += 1;\n        accumulator[j] = [arrayItem];\n      } else {\n        accumulator[j].push(arrayItem);\n      }\n\n      return accumulator;\n    },\n    []\n  );\n\n  return chunkedArrayObject;\n}\n"]}]}