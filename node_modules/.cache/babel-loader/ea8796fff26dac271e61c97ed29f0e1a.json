{"remainingRequest":"/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/eth-vue/src/store/mutations.js","dependencies":[{"path":"/home/ubuntu/eth-vue/src/store/mutations.js","mtime":1640695749879},{"path":"/home/ubuntu/eth-vue/babel.config.js","mtime":1640695749839},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js","mtime":1640788501629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}