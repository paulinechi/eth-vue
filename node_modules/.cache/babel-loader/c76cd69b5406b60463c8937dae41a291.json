{"remainingRequest":"/home/ubuntu/eth-vue/node_modules/thread-loader/dist/cjs.js!/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/eth-vue/src/js/UserManager.js","dependencies":[{"path":"/home/ubuntu/eth-vue/src/js/UserManager.js","mtime":1640695749875},{"path":"/home/ubuntu/eth-vue/babel.config.js","mtime":1640695749839},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/thread-loader/dist/cjs.js","mtime":1640501305479},{"path":"/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js","mtime":1640788501629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS91YnVudHUvZXRoLXZ1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9ob21lL3VidW50dS9ldGgtdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvdWJ1bnR1L2V0aC12dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0IERCIGZyb20gIi4uLy4uL2J1aWxkL2NvbnRyYWN0cy9EQi5qc29uIjsKaW1wb3J0IFVzZXJBdXRoTWFuYWdlciBmcm9tICIuLi8uLi9idWlsZC9jb250cmFjdHMvVXNlckF1dGhNYW5hZ2VyLmpzb24iOwppbXBvcnQgYmxvY2tjaGFpbk1hbmFnZXIgZnJvbSAiLi9CbG9ja2NoYWluTWFuYWdlciI7CmltcG9ydCB7IGdldE9iamVjdEZyb21SZXNwb25zZSwgZ2V0U2xpY2VkQWRkcmVzc1N0cmluZywgZ2V0U29saWRpdHlTaGEzRm9ySWQsIGdldEdyYXZhdGFyRm9yIH0gZnJvbSAiLi91dGlsaXRpZXMiOwp2YXIgdXNlck1hbmFnZXIgPSBudWxsOwoKdmFyIFVzZXJNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBVc2VyTWFuYWdlcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyTWFuYWdlcik7CgogICAgdXNlck1hbmFnZXIgPSB1c2VyTWFuYWdlciB8fCB0aGlzOwogICAgcmV0dXJuIHVzZXJNYW5hZ2VyOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFVzZXJNYW5hZ2VyLCBbewogICAga2V5OiAiZ2V0Q29udHJhY3RUb1VzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udHJhY3RUb1VzZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBVc2VyQXV0aE1hbmFnZXI6IFVzZXJBdXRoTWFuYWdlcgogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImFjY2Vzc0Jsb2NrY2hhaW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFjY2Vzc0Jsb2NrY2hhaW4oKSB7CiAgICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDsKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICIiOwogICAgICB2YXIgYmxvY2tjaGFpbkRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhKTsKICAgICAgdmFyIGNvbnRyYWN0VG9Vc2UgPSBibG9ja2NoYWluRGF0YS5jb250cmFjdEluZGV4VG9Vc2UgPyB1c2VyTWFuYWdlci5nZXRDb250cmFjdFRvVXNlKClbYmxvY2tjaGFpbkRhdGEuY29udHJhY3RJbmRleFRvVXNlXSA6IG51bGw7CiAgICAgIHZhciBibG9ja2NoYWluTWV0aG9kTmFtZSA9IGJsb2NrY2hhaW5EYXRhLm1ldGhvZE5hbWU7CiAgICAgIGRlbGV0ZSBibG9ja2NoYWluRGF0YS5jb250cmFjdEluZGV4VG9Vc2U7CiAgICAgIGRlbGV0ZSBibG9ja2NoYWluRGF0YS5tZXRob2ROYW1lOwogICAgICByZXR1cm4gYmxvY2tjaGFpbk1hbmFnZXIucXVlcnlTbWFydENvbnRyYWN0KHsKICAgICAgICBjb250cmFjdFRvVXNlOiBjb250cmFjdFRvVXNlIHx8IFVzZXJBdXRoTWFuYWdlciwKICAgICAgICBzbWFydENvbnRyYWN0TWV0aG9kOiBibG9ja2NoYWluTWV0aG9kTmFtZSwKICAgICAgICBzbWFydENvbnRyYWN0TWV0aG9kUGFyYW1zOiBmdW5jdGlvbiBzbWFydENvbnRyYWN0TWV0aG9kUGFyYW1zKGNvaW5iYXNlKSB7CiAgICAgICAgICB2YXIgYmxvY2tjaGFpblBheWxvYWQgPSB2YWx1ZSAhPT0gIiIgPyB7CiAgICAgICAgICAgIGZyb206IGNvaW5iYXNlLAogICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgIH0gOiB7CiAgICAgICAgICAgIGZyb206IGNvaW5iYXNlCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LnZhbHVlcyhibG9ja2NoYWluRGF0YSkpLCBbYmxvY2tjaGFpblBheWxvYWRdKTsKICAgICAgICB9LAogICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICBzbWFydENvbnRyYWN0UmVzb2x2ZTogZnVuY3Rpb24gc21hcnRDb250cmFjdFJlc29sdmUocmVzdWx0KSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0sCiAgICAgICAgc21hcnRDb250cmFjdFJlamVjdDogZnVuY3Rpb24gc21hcnRDb250cmFjdFJlamVjdChlcnJvcikgewogICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvbWlzaWZ5VXNlckRhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByb21pc2lmeVVzZXJEYXRhKCkgewogICAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7CiAgICAgIHZhciB1c2VyUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgdXNlck9iamVjdCA9IHt9OwogICAgICAgIHZhciB1c2VySWQgPSB1c2VyUGFyYW1zLnVzZXJJZCB8fCBzdGF0ZS53ZWIzLmNvaW5iYXNlOwogICAgICAgIHVzZXJNYW5hZ2VyLmdldFVzZXJEYXRhKHN0YXRlLCB1c2VySWQsIHVzZXJQYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgT2JqZWN0LmFzc2lnbih1c2VyT2JqZWN0LCByZXN1bHQpOwogICAgICAgICAgdXNlck1hbmFnZXIucmVmaW5lVXNlckRhdGEodXNlck9iamVjdCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXNvbHZlKHVzZXJPYmplY3QpOwogICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VXNlckRhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVzZXJEYXRhKCkgewogICAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7CiAgICAgIHZhciB1c2VySWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7CiAgICAgIHZhciB1c2VyT2JqZWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTsKICAgICAgcmV0dXJuIGJsb2NrY2hhaW5NYW5hZ2VyLnF1ZXJ5U21hcnRDb250cmFjdCh7CiAgICAgICAgY29udHJhY3RUb1VzZTogREIsCiAgICAgICAgc21hcnRDb250cmFjdE1ldGhvZDogImdldE9iamVjdERhdGEiLAogICAgICAgIHNtYXJ0Q29udHJhY3RNZXRob2RQYXJhbXM6IGZ1bmN0aW9uIHNtYXJ0Q29udHJhY3RNZXRob2RQYXJhbXMoY29pbmJhc2UpIHsKICAgICAgICAgIHVzZXJJZCA9IHVzZXJJZCB8fCBjb2luYmFzZTsKICAgICAgICAgIHJldHVybiBbdXNlck9iamVjdC5yZWNvcmRGaWVsZHMgfHwgdXNlck1hbmFnZXIudXNlclJlY29yZEZpZWxkcyhzdGF0ZSwgdXNlcklkKSwgdXNlck9iamVjdC5yZWNvcmRGaWVsZFR5cGVzIHx8IHVzZXJNYW5hZ2VyLnVzZXJSZWNvcmRGaWVsZFR5cGVzKCksIHsKICAgICAgICAgICAgZnJvbTogY29pbmJhc2UKICAgICAgICAgIH1dOwogICAgICAgIH0sCiAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgIHNtYXJ0Q29udHJhY3RSZXNvbHZlOiBmdW5jdGlvbiBzbWFydENvbnRyYWN0UmVzb2x2ZShyZXN1bHQpIHsKICAgICAgICAgIHZhciB1c2VyRGF0YSA9IGdldE9iamVjdEZyb21SZXNwb25zZShzdGF0ZSwgcmVzdWx0LCAxLCB1c2VyT2JqZWN0LmtleXMgfHwgdXNlck1hbmFnZXIudXNlcktleXMoKSwgdXNlck9iamVjdC5yZWNvcmRGaWVsZFR5cGVzIHx8IHVzZXJNYW5hZ2VyLnVzZXJSZWNvcmRGaWVsZFR5cGVzKCkpWzBdOwogICAgICAgICAgdXNlckRhdGEuY29pbmJhc2UgPSB1c2VyRGF0YS5jb2luYmFzZSB8fCB1c2VySWQ7CiAgICAgICAgICByZXR1cm4gdXNlckRhdGE7CiAgICAgICAgfSwKICAgICAgICBzbWFydENvbnRyYWN0UmVqZWN0OiBmdW5jdGlvbiBzbWFydENvbnRyYWN0UmVqZWN0KGVycm9yKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBlcnJvcjogZXJyb3IsCiAgICAgICAgICAgIGlzVmFsaWQ6IHRydWUsCiAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlOiAiV2UndmUgZW5jb3VudGVyZWQgYSBwcm9ibGVtIGZldGNoaW5nIHlvdXIgaW5mb3JtYXRpb24gZnJvbSB0aGUgYmxvY2tjaGFpbi4gUGxlYXNlIGRvIHRyeSBhZ2FpbiBpbiBhIGZldyBtaW51dGVzLiIKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWZpbmVVc2VyRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmaW5lVXNlckRhdGEodXNlck9iamVjdCkgewogICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7CiAgICAgIGdldEdyYXZhdGFyRm9yKHsKICAgICAgICBlbWFpbDogdXNlck9iamVjdC5lbWFpbCwKICAgICAgICBjb2luYmFzZTogdXNlck9iamVjdC5jb2luYmFzZQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChhdmF0YXJDYW52YXMpIHsKICAgICAgICB1c2VyT2JqZWN0LmF2YXRhckNhbnZhcyA9IGF2YXRhckNhbnZhczsKICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKHVzZXJPYmplY3QpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWZhdWx0VXNlck9iamVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFVzZXJPYmplY3QoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYmFsYW5jZTogIjAuMDAiLAogICAgICAgIGNvaW5iYXNlOiAiIiwKICAgICAgICBlbWFpbDogIiIsCiAgICAgICAgZmlyc3ROYW1lOiAiIiwKICAgICAgICBncmF2YXRhcjogIiIsCiAgICAgICAgaGFzQ29pbmJhc2U6IGZhbHNlLAogICAgICAgIGhhc1dlYjNJbmplY3RlZEJyb3dzZXI6IGZhbHNlLAogICAgICAgIGlzQ29ubmVjdGVkVG9BcHByb3ZlZE5ldHdvcms6IGZhbHNlLAogICAgICAgIGlzTG9nZ2VkSW46IGZhbHNlLAogICAgICAgIGxhc3ROYW1lOiAiIgogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInVzZXJLZXlzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1c2VyS2V5cygpIHsKICAgICAgcmV0dXJuIFsiZmlyc3ROYW1lIiwgImxhc3ROYW1lIiwgImVtYWlsIiwgImdyYXZhdGFyIl07CiAgICB9CiAgfSwgewogICAga2V5OiAidXNlclJlY29yZEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXNlclJlY29yZEZpZWxkcyhzdGF0ZSwgdXNlcklkKSB7CiAgICAgIHVzZXJJZCA9IGdldFNsaWNlZEFkZHJlc3NTdHJpbmcoc3RhdGUsIHVzZXJJZCk7CiAgICAgIHJldHVybiBbZ2V0U29saWRpdHlTaGEzRm9ySWQoc3RhdGUsICJ1c2VyL2ZpcnN0LW5hbWUiLCB1c2VySWQpLCBnZXRTb2xpZGl0eVNoYTNGb3JJZChzdGF0ZSwgInVzZXIvbGFzdC1uYW1lIiwgdXNlcklkKSwgZ2V0U29saWRpdHlTaGEzRm9ySWQoc3RhdGUsICJ1c2VyL2VtYWlsIiwgdXNlcklkKSwgZ2V0U29saWRpdHlTaGEzRm9ySWQoc3RhdGUsICJ1c2VyL2dyYXZhdGFyIiwgdXNlcklkKV07CiAgICB9CiAgfSwgewogICAga2V5OiAidXNlclJlY29yZEZpZWxkVHlwZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVzZXJSZWNvcmRGaWVsZFR5cGVzKCkgewogICAgICAvLyB0eXBlczogMSA9PiBib29sZWFuLCAyID0+IHVpbnQ4LCAzID0+IHVpbnQsIDQgPT4gYWRkcmVzcywgNSA9PiBieXRlczMyLCA3ID0+IHN0cmluZwogICAgICByZXR1cm4gWzcsIDcsIDcsIDVdOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFVzZXJNYW5hZ2VyOwp9KCk7Cgp1c2VyTWFuYWdlciA9IG5ldyBVc2VyTWFuYWdlcigpOwpleHBvcnQgZGVmYXVsdCB1c2VyTWFuYWdlcjs="},{"version":3,"sources":["/home/ubuntu/eth-vue/src/js/UserManager.js"],"names":["DB","UserAuthManager","blockchainManager","getObjectFromResponse","getSlicedAddressString","getSoliditySha3ForId","getGravatarFor","userManager","UserManager","state","data","value","blockchainData","Object","assign","contractToUse","contractIndexToUse","getContractToUse","blockchainMethodName","methodName","querySmartContract","smartContractMethod","smartContractMethodParams","coinbase","blockchainPayload","from","values","smartContractResolve","result","smartContractReject","error","userParams","Promise","resolve","reject","userObject","userId","web3","getUserData","then","refineUserData","catch","recordFields","userRecordFields","recordFieldTypes","userRecordFieldTypes","userData","keys","userKeys","isValid","warningMessage","callback","email","avatarCanvas","balance","firstName","gravatar","hasCoinbase","hasWeb3InjectedBrowser","isConnectedToApprovedNetwork","isLoggedIn","lastName"],"mappings":"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","sourcesContent":["import DB from \"../../build/contracts/DB.json\";\nimport UserAuthManager from \"../../build/contracts/UserAuthManager.json\";\nimport blockchainManager from \"./BlockchainManager\";\nimport {\n  getObjectFromResponse,\n  getSlicedAddressString,\n  getSoliditySha3ForId,\n  getGravatarFor\n} from \"./utilities\";\n\nlet userManager = null;\n\nclass UserManager {\n  constructor() {\n    userManager = userManager || this;\n    return userManager;\n  }\n\n  getContractToUse() {\n    return {\n      UserAuthManager\n    };\n  }\n\n  accessBlockchain(state = null, data = {}, value = \"\") {\n    const blockchainData = Object.assign({}, data);\n    const contractToUse = blockchainData.contractIndexToUse\n      ? userManager.getContractToUse()[blockchainData.contractIndexToUse]\n      : null;\n    const blockchainMethodName = blockchainData.methodName;\n\n    delete blockchainData.contractIndexToUse;\n    delete blockchainData.methodName;\n    return blockchainManager.querySmartContract({\n      contractToUse: contractToUse || UserAuthManager,\n      smartContractMethod: blockchainMethodName,\n      smartContractMethodParams: coinbase => {\n        const blockchainPayload =\n          value !== \"\" ? { from: coinbase, value } : { from: coinbase };\n        return [...Object.values(blockchainData), blockchainPayload];\n      },\n      state,\n      smartContractResolve: result => result,\n      smartContractReject: error => error\n    });\n  }\n\n  promisifyUserData(state = null, userParams = {}) {\n    return new Promise((resolve, reject) => {\n      const userObject = {};\n      const userId = userParams.userId || state.web3.coinbase;\n      userManager\n        .getUserData(state, userId, userParams)\n        .then(result => {\n          Object.assign(userObject, result);\n          userManager.refineUserData(userObject, () => {\n            resolve(userObject);\n          });\n        })\n        .catch(error => reject(error));\n    });\n  }\n\n  getUserData(state = null, userId = null, userObject = {}) {\n    return blockchainManager.querySmartContract({\n      contractToUse: DB,\n      smartContractMethod: \"getObjectData\",\n      smartContractMethodParams: coinbase => {\n        userId = userId || coinbase;\n        return [\n          userObject.recordFields ||\n            userManager.userRecordFields(state, userId),\n          userObject.recordFieldTypes || userManager.userRecordFieldTypes(),\n          { from: coinbase }\n        ];\n      },\n      state,\n      smartContractResolve: result => {\n        const userData = getObjectFromResponse(\n          state,\n          result,\n          1,\n          userObject.keys || userManager.userKeys(),\n          userObject.recordFieldTypes || userManager.userRecordFieldTypes()\n        )[0];\n        userData.coinbase = userData.coinbase || userId;\n        return userData;\n      },\n      smartContractReject: error => ({\n        error,\n        isValid: true,\n        warningMessage:\n          \"We've encountered a problem fetching your information from the blockchain. Please do try again in a few minutes.\"\n      })\n    });\n  }\n\n  refineUserData(userObject, callback = null) {\n    getGravatarFor({\n      email: userObject.email,\n      coinbase: userObject.coinbase\n    }).then(avatarCanvas => {\n      userObject.avatarCanvas = avatarCanvas;\n      if (callback) callback(userObject);\n    });\n  }\n\n  defaultUserObject() {\n    return {\n      balance: \"0.00\",\n      coinbase: \"\",\n      email: \"\",\n      firstName: \"\",\n      gravatar: \"\",\n      hasCoinbase: false,\n      hasWeb3InjectedBrowser: false,\n      isConnectedToApprovedNetwork: false,\n      isLoggedIn: false,\n      lastName: \"\"\n    };\n  }\n\n  userKeys() {\n    return [\"firstName\", \"lastName\", \"email\", \"gravatar\"];\n  }\n\n  userRecordFields(state, userId) {\n    userId = getSlicedAddressString(state, userId);\n\n    return [\n      getSoliditySha3ForId(state, \"user/first-name\", userId),\n      getSoliditySha3ForId(state, \"user/last-name\", userId),\n      getSoliditySha3ForId(state, \"user/email\", userId),\n      getSoliditySha3ForId(state, \"user/gravatar\", userId)\n    ];\n  }\n\n  userRecordFieldTypes() {\n    // types: 1 => boolean, 2 => uint8, 3 => uint, 4 => address, 5 => bytes32, 7 => string\n    return [7, 7, 7, 5];\n  }\n}\n\nuserManager = new UserManager();\nexport default userManager;\n"]}]}