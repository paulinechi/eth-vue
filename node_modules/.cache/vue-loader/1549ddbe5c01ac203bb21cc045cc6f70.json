{"remainingRequest":"/home/ubuntu/eth-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/eth-vue/src/components/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/ubuntu/eth-vue/src/components/App.vue","mtime":1640695749875},{"path":"/home/ubuntu/eth-vue/node_modules/css-loader/dist/cjs.js","mtime":1640501313317},{"path":"/home/ubuntu/eth-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1640788505663},{"path":"/home/ubuntu/eth-vue/node_modules/postcss-loader/src/index.js","mtime":1640077159126},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/vue-loader/lib/index.js","mtime":1640788505663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaHRtbCB7CiAgYmFja2dyb3VuZDogI2VlZjBlZjsKfQoKYm9keSB7CiAgbWFyZ2luOiAwOwogIHdpZHRoOiAxMDAlOwp9CgoqIHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cgp0ZXh0YXJlYSB7CiAgcmVzaXplOiBub25lOwp9CgojYXBwIHsKICBmb250LWZhbWlseTogIkF2ZW5pciIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7CiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsKICBjb2xvcjogIzJjM2U1MDsKICB3aWR0aDogMTAwJTsKICAvKm1heC13aWR0aDogOTYwcHg7Ki8KICBtaW4td2lkdGg6IDEwMjBweDsKICBtYXJnaW46IGF1dG87Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkQA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view\n      :is-d-app-ready=\"isDAppReady\"\n      :current-view=\"currentView\"\n      :is-valid-user-but=\"isValidUserBut\"\n      @log-user-in=\"logUserIn\"\n      @log-user-out=\"logUserOut\"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  computed: {\n    ...mapState({\n      hasInjectedWeb3: state => state.web3.isInjected,\n      hasWeb3InjectedBrowser: state => state.user.hasWeb3InjectedBrowser,\n      isConnectedToApprovedNetwork: state =>\n        state.user.isConnectedToApprovedNetwork,\n      hasCoinbase: state => state.user.hasCoinbase,\n      networkId: state => state.web3.networkId,\n      coinbase: state => state.web3.coinbase,\n      currentRoute: state => state.currentRoute,\n      currentView: state => state.currentView,\n      user: state => state.user,\n      isDAppReady: state => state.isDAppReady,\n      isValidUserBut: state => state.isValidUserBut,\n      originalIsValidUserBut: state => state.originalIsValidUserBut,\n      gravatarURL: state => state.gravatarURL,\n      avatarCanvas: state => state.avatarCanvas,\n      defaultRoute: state => state.defaultRoute\n    })\n  },\n  data: function() {\n    return {\n      managers: { UserManager }\n    };\n  },\n  watch: {\n    hasInjectedWeb3(web3ConnectionValue) {\n      console.log(\"App:::hasInjectedWeb3: \", web3ConnectionValue);\n    },\n    networkId(networkId) {\n      console.log(\"App:::networkId: \", networkId);\n    },\n    coinbase(coinbase) {\n      console.log(\"App:::coinbase: \", coinbase);\n    },\n    isDAppReady(isDAppReady) {\n      console.log(\"App:::isDAppReady: \", isDAppReady);\n      this.callSetIsValidUserBut(\n        this.$route.query.isValidUserBut || this.forcedIsValidUserBut\n      );\n    },\n    $route(newRoute) {\n      this[ACTION_TYPES.CHANGE_CURRENT_ROUTE_TO](newRoute);\n      this[ACTION_TYPES.SET_CURRENT_VIEW](newRoute);\n      const isValidUserBut = this.$route.query.isValidUserBut;\n      if (isValidUserBut) {\n        this.callSetIsValidUserBut(isValidUserBut);\n      } else {\n        this.callResetIsValidUserBut();\n      }\n    }\n  },\n  beforeCreate: function() {\n    this.$store\n      .dispatch(ACTION_TYPES.REGISTER_WEB3_INSTANCE)\n      .then(result => {\n        let state = result.state;\n        monitorWeb3(state);\n        this.$store\n          .dispatch(ACTION_TYPES.UPDATE_USER_BLOCKCHAIN_STATUS)\n          .then(() => {\n            if (!this.isDAppReady) {\n              this.forcedIsValidUserBut = \"0\";\n              this.$store.dispatch(ACTION_TYPES.UPDATE_DAPP_READINESS, true);\n            }\n          })\n          .catch(() => {\n            console.log(\"App:::Unable to UPDATE_USER_BLOCKCHAIN_STATUS\");\n            if (!this.isDAppReady) {\n              this.$store.dispatch(ACTION_TYPES.UPDATE_DAPP_READINESS, true);\n            }\n          });\n      })\n      .catch((result = {}) => {\n        let state = result.state;\n        this.forcedIsValidUserBut = \"0\";\n        monitorWeb3(state);\n        if (!this.isDAppReady) {\n          this.$store.dispatch(ACTION_TYPES.UPDATE_DAPP_READINESS, true);\n        }\n\n        console.error(result, \"App:::Unable to REGISTER_WEB3_INSTANCE\");\n      });\n  },\n  created: function() {\n    this[ACTION_TYPES.CHANGE_CURRENT_ROUTE_TO](this.$route);\n    this[ACTION_TYPES.SET_CURRENT_VIEW](this.$route);\n  },\n  methods: {\n    ...mapActions([\n      ACTION_TYPES.CHANGE_CURRENT_ROUTE_TO,\n      ACTION_TYPES.UPDATE_USER_GRAVATAR,\n      ACTION_TYPES.SET_IS_VALID_USER_BUT,\n      ACTION_TYPES.RESET_IS_VALID_USER_BUT,\n      ACTION_TYPES.SET_CURRENT_VIEW,\n      ACTION_TYPES.LOGIN\n    ]),\n    callUpdateUserGravatar(payload = null) {\n      this[ACTION_TYPES.UPDATE_USER_GRAVATAR](payload);\n    },\n    callToWriteUser(payload = null) {\n      const actionParams = Object.assign({}, payload.requestParams, {\n        methodName: payload.methodName,\n        contractIndexToUse: payload.contractIndexToUse\n      });\n      this.managers[payload.managerIndex || \"UserManager\"]\n        .accessBlockchain(this.$store.state, actionParams)\n        .then(userData => {\n          this[ACTION_TYPES.LOGIN]({\n            userObject: payload.vueObject\n          })\n            .then(() => {\n              if (payload.callback) payload.callback(userData);\n            })\n            .catch(error => {\n              console.error(\"App:::Unable to perform login action: \" + error);\n            });\n        })\n        .catch(error => {\n          if (payload.callback) payload.callback(false);\n          console.error(\"App:::Unable to write user data: \" + error);\n        });\n    },\n    callSetIsValidUserBut(newValue) {\n      this[ACTION_TYPES.SET_IS_VALID_USER_BUT](newValue);\n    },\n    callResetIsValidUserBut() {\n      this[ACTION_TYPES.RESET_IS_VALID_USER_BUT]();\n    },\n    callToAccessBlockchain(payload = null) {\n      const actionParams = Object.assign({}, payload.requestParams, {\n        methodName: payload.methodName,\n        contractIndexToUse: payload.contractIndexToUse\n      });\n      const value = payload.value;\n      this.managers[payload.managerIndex || \"UserManager\"]\n        .accessBlockchain(this.$store.state, actionParams, value)\n        .then(responseObject => {\n          if (payload.callback) payload.callback(responseObject);\n        })\n        .catch(err => {\n          if (payload.callback) payload.callback(false);\n          console.error(\n            err,\n            `App:::Unable to ${payload.methodName}. You may not need to pay any attention to this error. A page load on Sign Up may throw this error, but everything is fine.`\n          );\n        });\n    },\n    logUserIn(evt = null) {\n      if (!this.user.isLoggedIn) {\n        this.$root.callToAccessBlockchain({\n          requestParams: {},\n          contractIndexToUse: \"UserAuthManager\",\n          methodName: \"login\",\n          managerIndex: \"UserManager\",\n          callback: (isUserExists = false) => {\n            if (evt) evt.target.disabled = false;\n            if (isUserExists) {\n              UserManager.promisifyUserData(this.$store.state)\n                .then(userObject => {\n                  this.$store\n                    .dispatch(ACTION_TYPES.LOGIN, {\n                      userObject\n                    })\n                    .then(() => {\n                      console.log(\n                        \"App:::LOGIN Successful\",\n                        this.user.isLoggedIn\n                      );\n                      if (this.user.isLoggedIn) this.$router.push(\"/dashboard\");\n                      else this.$router.push(\"/home\");\n                    })\n                    .catch(() => {\n                      console.log(\"App:::Unable to LOGIN\");\n                      if (!this.isDAppReady) {\n                        this.$store.dispatch(\n                          ACTION_TYPES.UPDATE_DAPP_READINESS,\n                          true\n                        );\n                      }\n                    });\n                })\n                .catch((result = {}) => {\n                  console.error(result, \"App:::Unable to fetch User Data\");\n                  if (result.isValid) {\n                    this.$store\n                      .dispatch(\n                        ACTION_TYPES.INITIALISE_IS_VALID_USER_BUT,\n                        result.warningMessage\n                      )\n                      .then(() => {\n                        if (!this.isDAppReady) {\n                          this.$store.dispatch(\n                            ACTION_TYPES.UPDATE_DAPP_READINESS,\n                            true\n                          );\n                        }\n                      })\n                      .catch(() => {\n                        console.log(\n                          \"App:::Unable to INITIALISE_IS_VALID_USER_BUT\"\n                        );\n                        if (!this.isDAppReady) {\n                          this.$store.dispatch(\n                            ACTION_TYPES.UPDATE_DAPP_READINESS,\n                            true\n                          );\n                        }\n                      });\n                  } else {\n                    if (!this.isDAppReady) {\n                      this.$store.dispatch(\n                        ACTION_TYPES.UPDATE_DAPP_READINESS,\n                        true\n                      );\n                    }\n                  }\n                });\n            } else {\n              this.$router.push(\"/\");\n            }\n          }\n        });\n      } else {\n        if (evt) evt.target.disabled = false;\n      }\n    },\n    logUserOut(evt = null) {\n      this.$store.dispatch(ACTION_TYPES.LOGOUT).then(() => {\n        if (evt) evt.target.disabled = false;\n        this.$router.push(\"/\");\n      });\n    }\n  }\n};\n\nimport { mapState, mapActions } from \"vuex\";\nimport { ACTION_TYPES } from \"../util/constants\";\nimport UserManager from \"../js/UserManager\";\nimport monitorWeb3 from \"../util/web3/monitorWeb3\";\n</script>\n\n<style>\nhtml {\n  background: #eef0ef;\n}\n\nbody {\n  margin: 0;\n  width: 100%;\n}\n\n* {\n  box-sizing: border-box;\n}\n\ntextarea {\n  resize: none;\n}\n\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  width: 100%;\n  /*max-width: 960px;*/\n  min-width: 1020px;\n  margin: auto;\n}\n</style>\n"]}]}