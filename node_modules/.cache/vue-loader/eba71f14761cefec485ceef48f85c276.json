{"remainingRequest":"/home/ubuntu/eth-vue/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/ubuntu/eth-vue/src/components/App.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/eth-vue/src/components/App.vue","mtime":1640695749875},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/babel-loader/lib/index.js","mtime":1640788501629},{"path":"/home/ubuntu/eth-vue/node_modules/cache-loader/dist/cjs.js","mtime":1640501305467},{"path":"/home/ubuntu/eth-vue/node_modules/vue-loader-v16/dist/index.js","mtime":1640695707108}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}